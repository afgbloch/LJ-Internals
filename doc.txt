================================================================================
Interesting LuaJIT Presentation: https://mrale.ph/talks/vmss16/#/
================================================================================
Programming advice:
  1) for i=1,#s do end
  2) for v in ipairs(s) do end
1) is better in terms of performance. (to be confirmed)
                        **************************
Jitting start always jiting the inner loop first
                        **************************
When starting a record hotcount is reseted even if trace endup aborted.
                        **************************
Indexing a table with a string should be as fast as with a reference (table).
================================================================================
- check if vector size can go down -> yes
- check hypothesis of pairs ? -> vector first, hash part second
- check '?' in error messages (table.insert, table.remove, band) (builtin vs functions)
- Where does the limit of 65000 identifier per chunk comes from.
================================================================================
- function that ends by a c api/ffi tail-call can not be compile in standalone.
  - potential solution is wrapping return value with ().
- lua_setmetatable run flushall mcode because cdata metatamethode lookup is specialise
  metatable is immutable.
================================================================================
  - LJ_PRNG_BITS in lj_jit.h for penalty used for penalty randomization.
================================================================================
LuaJIT Multithreading:
----------------------
GG_State     : Global state, main thread and extra fields are allocated together.
global_State : Global state, shared by all threads of a Lua universe.

(see also lj_state.h, lj_state.c)

lua_open <=> luaL_newstate : create a fully separate LuaJIT with everything separated
  - allocator
  - garbage collector
  - GG_State
  - global_State
  - Jit_state
================================================================================
Loom: Mostly usefull to use hypetext link to navigate between traces
-----
- launch loom programmatically
  local loom = require"ljit_loom"
  local tmpl = loom.template("loom.html")
  loom.on()
  local out  = loom.off(tmpl)
  local file = assert(io.open("report.html", "w"))
  file:write(out)
  file:close()
- launch loom through the command line
  rlwrap ./mad -jloom=,out.html test.lua
NB:
  - flushs make loom crash (tmp fix)
  - MAD.tostring export (in all.mad) makes loom crash
================================================================================
- lookup the same constant keys in hashtables of many different shapes and sizes
is bad !!!!
================================================================================
https://github.com/lukego/blog/issues/28
================================================================================
